from calculator import *

c0 = c_num(0)
c1 = c_num(1)
c2 = c_num(2)
c3 = c_num(3)
cn1 = c_num(-1)
cn3 = c_num(-3)
cq2 = c_sqrt(c2)
cfq2 = c_frac(c1, cq2)
ncfq2 = c_mul(cn1, cfq2)
c5 = c_num(5)
e = c_var('e')
x = c_var('x')
t = c_var('t')
et = c_power(e, t)
cf5 = c_frac(c1, c5)

# A = c_matrix([[-1, 5], [0, -2]])
# print(A.var[0][0].type)
# V, D = c_matrix_eigen(A)
# V = cancel_all(V)
# D = cancel_all(D)
# eAt = V@c_matrix([[e^(-1*t),0],[0,e^(-2*t)]])@c_matrix_inv(V)
# eAt = cancel_all(eAt)
# B = cancel_all(c_matrix_t(eAt)@eAt)
# e1, e2 = c_matrix_eigenvalue(B)
# # latex_print([V.var[0][1]])
# latex_print(cancel_all([A, eAt, B, V, c_matrix_inv(V), e1, e2]))

A = c_matrix([[1, -3, c_ln(3)/c_sqrt(2)], [-2, -6, 13], [-1, -4, 8]])
I = c_matrix_eye(3)
p = cancel_all(c_matrix_eigenfunc(A))
r = c_sin(c_tan(x))
pycode_print(A)
q = c_matrix([[c_num(1),c_num(-3),c_num(3)],[c_num(-2),c_num(-6),c_num(13)],[c_num(-1),c_num(-4),c_num(8)]])
latex_print(cancel_all([c_matrix_det(x*I-A), c_matrix_eigenfunc(A), A, q], 10000))